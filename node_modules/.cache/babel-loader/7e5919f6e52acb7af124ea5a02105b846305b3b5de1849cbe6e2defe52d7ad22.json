{"ast":null,"code":"var _s = $RefreshSig$();\nimport { baseURL } from \"./OpenAI\";\nimport React from \"react\";\nimport axios from \"axios\";\nclass OpenAINLP extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      urlBase: baseURL,\n      openAIresponse: {\n        names: [],\n        specie: \"\"\n      }\n    };\n  }\n  GetPetNames(specieInput) {\n    this.state.petSpecie = specieInput;\n    axios.post(this.state.urlBase + \"nlp-pet-name/specie/\" + this.state.petSpecie).then(response => {\n      this.state.openAIresponse = response.data;\n      return this.state.openAIresponse;\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  fGetPetNamesFake(specieInput) {\n    this.state.specie = specieInput;\n    axios.post(baseURL + \"nlp-pet-name-fake/specie/\" + specieInput).then(response => {\n      setRes(response.data);\n      // this.state.openAIresponse.names = response.data.names;\n      // this.state.openAIresponse.specie = response.data.specie;\n      // // console.log(response.data);\n      // return response.data;\n    }).catch(error => {\n      console.log(error);\n    });\n    console.log(res);\n  }\n}\nfunction GetPetNamesFakeTest(specieInput) {\n  _s();\n  const [res, setRes] = React.useState(null);\n  axios.post(baseURL + \"nlp-pet-name-fake/specie/\" + specieInput).then(response => {\n    setRes(response.data);\n    // this.state.openAIresponse.names = response.data.names;\n    // this.state.openAIresponse.specie = response.data.specie;\n    // // console.log(response.data);\n    // return response.data;\n  }).catch(error => {\n    console.log(error);\n  });\n  console.log(res);\n}\n_s(GetPetNamesFakeTest, \"qR7UlrkXqWv6JDhbA12b34XdxNQ=\");\n_c = GetPetNamesFakeTest;\nexport default OpenAINLP;\nvar _c;\n$RefreshReg$(_c, \"GetPetNamesFakeTest\");","map":{"version":3,"names":["baseURL","React","axios","OpenAINLP","Component","constructor","props","state","urlBase","openAIresponse","names","specie","GetPetNames","specieInput","petSpecie","post","then","response","data","catch","error","console","log","fGetPetNamesFake","setRes","res","GetPetNamesFakeTest","useState"],"sources":["/home/manoel/Documents/pessoal/studies/ChatGPT/react-test/src/services/OpenAINLP.js"],"sourcesContent":["import { baseURL } from \"./OpenAI\";\nimport React from \"react\";\nimport axios from \"axios\";\n\nclass OpenAINLP extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            urlBase: baseURL,\n            openAIresponse: {\n                names: [],\n                specie: \"\",\n            },\n        };\n\n    }\n\n    GetPetNames(specieInput) {\n        this.state.petSpecie = specieInput;\n        axios\n         .post(this.state.urlBase + \"nlp-pet-name/specie/\" + this.state.petSpecie)\n         .then((response) => {\n\n            this.state.openAIresponse = response.data;\n            return this.state.openAIresponse;\n         })\n         .catch((error) => {\n            console.log(error);\n         });\n    }\n\n    fGetPetNamesFake(specieInput) {\n        this.state.specie = specieInput;\n        axios\n         .post(baseURL + \"nlp-pet-name-fake/specie/\" + specieInput)\n         .then((response) => {\n            setRes(response.data);\n            // this.state.openAIresponse.names = response.data.names;\n            // this.state.openAIresponse.specie = response.data.specie;\n            // // console.log(response.data);\n            // return response.data;\n         })\n         .catch((error) => {\n            console.log(error);\n         });\n        console.log(res);\n    }\n\n    \n}\n\nfunction GetPetNamesFakeTest(specieInput) {\n    const [res, setRes] = React.useState(null);\n    axios\n     .post(baseURL + \"nlp-pet-name-fake/specie/\" + specieInput)\n     .then((response) => {\n        setRes(response.data);\n        // this.state.openAIresponse.names = response.data.names;\n        // this.state.openAIresponse.specie = response.data.specie;\n        // // console.log(response.data);\n        // return response.data;\n     })\n     .catch((error) => {\n        console.log(error);\n     });\n    console.log(res);\n}\n\nexport default OpenAINLP;"],"mappings":";AAAA,SAASA,OAAO,QAAQ,UAAU;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,SAASF,KAAK,CAACG,SAAS,CAAC;EACpCC,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,OAAO,EAAER,OAAO;MAChBS,cAAc,EAAE;QACZC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE;MACZ;IACJ,CAAC;EAEL;EAEAC,WAAW,CAACC,WAAW,EAAE;IACrB,IAAI,CAACN,KAAK,CAACO,SAAS,GAAGD,WAAW;IAClCX,KAAK,CACHa,IAAI,CAAC,IAAI,CAACR,KAAK,CAACC,OAAO,GAAG,sBAAsB,GAAG,IAAI,CAACD,KAAK,CAACO,SAAS,CAAC,CACxEE,IAAI,CAAEC,QAAQ,IAAK;MAEjB,IAAI,CAACV,KAAK,CAACE,cAAc,GAAGQ,QAAQ,CAACC,IAAI;MACzC,OAAO,IAAI,CAACX,KAAK,CAACE,cAAc;IACnC,CAAC,CAAC,CACDU,KAAK,CAAEC,KAAK,IAAK;MACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACrB,CAAC,CAAC;EACP;EAEAG,gBAAgB,CAACV,WAAW,EAAE;IAC1B,IAAI,CAACN,KAAK,CAACI,MAAM,GAAGE,WAAW;IAC/BX,KAAK,CACHa,IAAI,CAACf,OAAO,GAAG,2BAA2B,GAAGa,WAAW,CAAC,CACzDG,IAAI,CAAEC,QAAQ,IAAK;MACjBO,MAAM,CAACP,QAAQ,CAACC,IAAI,CAAC;MACrB;MACA;MACA;MACA;IACH,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACrB,CAAC,CAAC;IACHC,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;EACpB;AAGJ;AAEA,SAASC,mBAAmB,CAACb,WAAW,EAAE;EAAA;EACtC,MAAM,CAACY,GAAG,EAAED,MAAM,CAAC,GAAGvB,KAAK,CAAC0B,QAAQ,CAAC,IAAI,CAAC;EAC1CzB,KAAK,CACHa,IAAI,CAACf,OAAO,GAAG,2BAA2B,GAAGa,WAAW,CAAC,CACzDG,IAAI,CAAEC,QAAQ,IAAK;IACjBO,MAAM,CAACP,QAAQ,CAACC,IAAI,CAAC;IACrB;IACA;IACA;IACA;EACH,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACrB,CAAC,CAAC;EACHC,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;AACpB;AAAC,GAfQC,mBAAmB;AAAA,KAAnBA,mBAAmB;AAiB5B,eAAevB,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}