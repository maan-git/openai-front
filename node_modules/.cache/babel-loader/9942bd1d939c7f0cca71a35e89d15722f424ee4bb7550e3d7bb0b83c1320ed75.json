{"ast":null,"code":"var _jsxFileName = \"/home/manoel/Documents/pessoal/studies/ChatGPT/react-test/src/components/PetNamesResultComponent.js\";\nimport React from 'react';\nimport { baseURL } from '../services/OpenAI';\nimport axios from 'axios';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass PetNamesResultComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      response: {\n        names: [],\n        specie: \"\"\n      }\n    };\n  }\n  async componentDidMount() {\n    if (this.props.specie === \"\") {\n      return;\n    }\n    axios.post(baseURL + \"nlp-pet-name-fake/specie/\" + this.props.specie).then(response => {\n      this.setState({\n        response: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    return;\n  }\n  async render() {\n    const renderResponse = () => {\n      if (this.state.response.names.length > 0) {\n        const res = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Specie: \", this.state.response.specie]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: this.state.response.names.map(name => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true);\n        return res;\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"There are no names for this specie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 24\n        }, this);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-pet-names\",\n      children: renderResponse()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default PetNamesResultComponent;","map":{"version":3,"names":["React","baseURL","axios","PetNamesResultComponent","Component","constructor","props","state","response","names","specie","componentDidMount","post","then","setState","data","catch","error","console","log","render","renderResponse","length","res","map","name"],"sources":["/home/manoel/Documents/pessoal/studies/ChatGPT/react-test/src/components/PetNamesResultComponent.js"],"sourcesContent":["import React from 'react';\nimport {baseURL} from '../services/OpenAI';\nimport axios from 'axios';\n\nclass PetNamesResultComponent extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            response: {\n                names: [],\n                specie: \"\",\n            },\n        }\n    }\n    async componentDidMount(){\n        if (this.props.specie === \"\"){\n            return;\n        }\n        axios\n         .post(baseURL + \"nlp-pet-name-fake/specie/\" + this.props.specie)\n         .then((response) => {\n            this.setState({response: response.data});\n         })\n         .catch((error) => {\n            console.log(error);\n         });\n        return;\n    }\n\n    async render(){\n        const renderResponse = () => {\n            if(this.state.response.names.length > 0){\n                const res = (\n                <>\n                    <p>Specie: {this.state.response.specie}</p>\n                    <ul>\n                        {\n                        this.state.response.names.map((name) => (\n                                <li>{name}</li>\n                            ))\n                        }\n                    </ul>\n                </>\n                );\n                return res;\n            }\n            else\n            {\n                return <p>There are no names for this specie</p>\n            }\n        }\n        return(\n            <div className=\"result-pet-names\">\n                {renderResponse()}\n            </div>\n        )\n    }\n}\n\nexport default PetNamesResultComponent;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,OAAO,QAAO,oBAAoB;AAC1C,OAAOC,KAAK,MAAM,OAAO;AAAC;AAAA;AAE1B,MAAMC,uBAAuB,SAASH,KAAK,CAACI,SAAS;EACjDC,WAAW,CAACC,KAAK,EAAC;IACd,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,QAAQ,EAAE;QACNC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE;MACZ;IACJ,CAAC;EACL;EACA,MAAMC,iBAAiB,GAAE;IACrB,IAAI,IAAI,CAACL,KAAK,CAACI,MAAM,KAAK,EAAE,EAAC;MACzB;IACJ;IACAR,KAAK,CACHU,IAAI,CAACX,OAAO,GAAG,2BAA2B,GAAG,IAAI,CAACK,KAAK,CAACI,MAAM,CAAC,CAC/DG,IAAI,CAAEL,QAAQ,IAAK;MACjB,IAAI,CAACM,QAAQ,CAAC;QAACN,QAAQ,EAAEA,QAAQ,CAACO;MAAI,CAAC,CAAC;IAC3C,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACrB,CAAC,CAAC;IACH;EACJ;EAEA,MAAMG,MAAM,GAAE;IACV,MAAMC,cAAc,GAAG,MAAM;MACzB,IAAG,IAAI,CAACd,KAAK,CAACC,QAAQ,CAACC,KAAK,CAACa,MAAM,GAAG,CAAC,EAAC;QACpC,MAAMC,GAAG,gBACT;UAAA,wBACI;YAAA,WAAG,UAAQ,EAAC,IAAI,CAAChB,KAAK,CAACC,QAAQ,CAACE,MAAM;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,eAC3C;YAAA,UAEI,IAAI,CAACH,KAAK,CAACC,QAAQ,CAACC,KAAK,CAACe,GAAG,CAAEC,IAAI,iBAC3B;cAAA,UAAKA;YAAI;cAAA;cAAA;cAAA;YAAA,QACZ;UAAC;YAAA;YAAA;YAAA;UAAA,QAEL;QAAA,gBAER;QACD,OAAOF,GAAG;MACd,CAAC,MAED;QACI,oBAAO;UAAA,UAAG;QAAkC;UAAA;UAAA;UAAA;QAAA,QAAI;MACpD;IACJ,CAAC;IACD,oBACI;MAAK,SAAS,EAAC,kBAAkB;MAAA,UAC5BF,cAAc;IAAE;MAAA;MAAA;MAAA;IAAA,QACf;EAEd;AACJ;AAEA,eAAelB,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}